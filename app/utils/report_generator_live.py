from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image as RLImage
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.units import inch
from datetime import datetime
import io


def build_patch_pdf_report(original_image, heatmap_image, overlay_image, prediction, confidence, focus_ratio,
                           center_distance, observation, clinical_note):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=40, leftMargin=40, topMargin=60, bottomMargin=30)
    styles = getSampleStyleSheet()
    elements = []

    # Unpack tuple
    center_x, center_y = center_distance

    # === Cover ===
    elements.append(Paragraph("<b>Patch-Level Cancer Detection Using ResNet18 and Grad-CAM</b>", styles['Title']))
    elements.append(Spacer(1, 12))
    elements.append(Paragraph("Project Summary Report", styles['Heading2']))
    elements.append(Spacer(1, 12))
    elements.append(Paragraph("Generated by: <b>Zohaib Shaikh</b>", styles["Normal"]))
    elements.append(Paragraph("Role: <b>AI/ML Engineer</b>", styles["Normal"]))
    elements.append(Paragraph("Organization: <b>McAttoh</b>", styles["Normal"]))
    elements.append(Paragraph(f"Report Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", styles["Normal"]))
    elements.append(Spacer(1, 30))

    # === Inference Summary ===
    elements.append(Paragraph("<b>1. Inference Summary</b>", styles["Heading1"]))
    elements.append(Paragraph(f"Prediction: <b>{'Abnormal / Cancerous' if prediction else 'Normal Tissue'}</b>", styles["Normal"]))
    elements.append(Paragraph(f"Confidence Score: <b>{confidence*100:.2f}%</b>", styles["Normal"]))
    elements.append(Paragraph(f"Affected Area (Focus Ratio): <b>{focus_ratio:.2f}</b>", styles["Normal"]))
    elements.append(Paragraph(f"Attention Center (x, y): <b>({center_x:.2f}, {center_y:.2f})</b>", styles["Normal"]))
    elements.append(Spacer(1, 20))

    # === Visualizations ===
    elements.append(Paragraph("<b>2. Grad-CAM Visual Analysis</b>", styles["Heading1"]))

    def pil_to_rl(pil_img):
        img_buffer = io.BytesIO()
        pil_img.save(img_buffer, format='PNG')
        img_buffer.seek(0)
        return RLImage(img_buffer, width=2.3 * inch, height=2.3 * inch)

    row = [
        pil_to_rl(original_image),
        pil_to_rl(heatmap_image),
        pil_to_rl(overlay_image)
    ]
    table = Table([row], colWidths=[2.4 * inch] * 3)
    table.setStyle(TableStyle([
        ('GRID', (0, 0), (-1, -1), 0.25, colors.grey)
    ]))
    elements.append(table)
    elements.append(Spacer(1, 20))

    # === AI Interpretation ===
    elements.append(Paragraph("<b>3. AI Interpretation</b>", styles["Heading1"]))
    elements.append(Paragraph(observation, styles["Normal"]))
    elements.append(Spacer(1, 20))

    # === Clinical Recommendation ===
    elements.append(Paragraph("<b>4. Clinical Recommendation</b>", styles["Heading1"]))
    elements.append(Paragraph(clinical_note, styles["Normal"]))
    elements.append(Spacer(1, 20))

    # === Technical Summary ===
    elements.append(Paragraph("<b>5. Technical Details</b>", styles["Heading1"]))
    summary_data = [
        ["Model", "ResNet18"],
        ["Prediction", "Abnormal" if prediction else "Normal"],
        ["Confidence", f"{confidence * 100:.2f}%"],
        ["Focus Ratio", f"{focus_ratio:.2f}"],
        # ["Attention Center (x, y)", f"({center_x:.2f}, {center_y:.2f})"],
        ["Attention Center (x, y)", f"({center_x:.2f}, {center_y:.2f})"],
        ["Generated", datetime.now().strftime('%Y-%m-%d %H:%M:%S')],
    ]
    table = Table(summary_data, hAlign='LEFT')
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (1, 0), colors.lightblue),
        ('GRID', (0, 0), (-1, -1), 0.3, colors.grey),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica')
    ]))
    elements.append(table)
    elements.append(Spacer(1, 12))

    # === Final Note ===
    elements.append(Paragraph("<b>6. Conclusion</b>", styles["Heading1"]))
    elements.append(Paragraph(
        "This patch-level prediction and interpretation were generated using a ResNet18 classifier trained on the Camelyon17-clean dataset. "
        "Grad-CAM overlays highlight the model's attention. This report can assist clinicians in understanding AI-based decisions and identifying potential false positives or negatives.",
        styles["Normal"]
    ))

    doc.build(elements)
    buffer.seek(0)
    return buffer